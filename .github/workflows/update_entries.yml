name: Update Entries JSON (No-Code Solution with PAT)

# Add permissions to allow pushing to the repository
permissions:
  contents: write

on:
  push:
    branches:
      - main
    paths:
      - 'data/**'
  workflow_dispatch: # Allows manual triggering

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      data_changed: ${{ steps.filter.outputs.data_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper path filtering
      
      - name: Check for changes in data directory
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            data_changed:
              - 'data/**'
  
  generate-entries-json:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.data_changed == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate entries.json
        id: generate
        run: |
          # Create a temporary directory listing
          echo "Scanning data directory..."
          echo "{" > entries.json
          
          # Get all directories in the data folder
          DIRS=$(find data -maxdepth 1 -mindepth 1 -type d | sort)
          TOTAL_DIRS=$(echo "$DIRS" | wc -l)
          CURRENT=0
          
          # Process each directory
          for DIR in $DIRS; do
            CURRENT=$((CURRENT+1))
            DIR_NAME=$(basename "$DIR")
            
            # Skip hidden directories
            if [[ "$DIR_NAME" == .* ]]; then
              continue
            fi
            
            echo "Processing directory: $DIR_NAME"
            
            # Find language files (assuming they follow the pattern of 2-letter code + .md)
            LANGS=$(find "$DIR" -maxdepth 1 -type f -name "??.md" | sed 's/.*\/\(.*\)\.md/\1/' | sort | tr '\n' ',' | sed 's/,$//')
            
            if [ -n "$LANGS" ]; then
              echo "  Found languages: $LANGS"
              
              # Add to JSON with proper formatting
              echo "  \"$DIR_NAME\": [" >> entries.json
              
              # Convert comma-separated list to JSON array
              IFS=',' read -ra LANG_ARRAY <<< "$LANGS"
              LANG_COUNT=${#LANG_ARRAY[@]}
              LANG_INDEX=0
              
              for LANG in "${LANG_ARRAY[@]}"; do
                LANG_INDEX=$((LANG_INDEX+1))
                if [ $LANG_INDEX -eq $LANG_COUNT ]; then
                  echo "    \"$LANG\"" >> entries.json
                else
                  echo "    \"$LANG\"," >> entries.json
                fi
              done
              
              # Close the array for this directory
              if [ $CURRENT -eq $TOTAL_DIRS ]; then
                echo "  ]" >> entries.json
              else
                echo "  ]," >> entries.json
              fi
            fi
          done
          
          # Close the JSON object
          echo "}" >> entries.json
          
          # Format the JSON properly
          if command -v jq &> /dev/null; then
            jq . entries.json > entries.json.tmp && mv entries.json.tmp entries.json
          fi
          
          echo "Successfully generated entries.json"
          cat entries.json
      
      - name: Upload entries.json as artifact
        uses: actions/upload-artifact@v3
        with:
          name: entries-json
          path: entries.json
  
  commit-and-push:
    needs: generate-entries-json
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download entries.json artifact
        uses: actions/download-artifact@v3
        with:
          name: entries-json
      
      - name: Check for changes
        id: git-check
        run: |
          git add entries.json
          git diff --staged --quiet entries.json || echo "changed=true" >> $GITHUB_OUTPUT
      
      - name: Commit and push if changed
        if: steps.git-check.outputs.changed == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git commit -m 'Automated update of entries.json'
          
          # Use the repository secret for authentication
          git push https://${{ secrets.my_tkn }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}

